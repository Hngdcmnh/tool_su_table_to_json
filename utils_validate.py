import json

def validate_image_jpg(output_rows):
    errors = []
    for i, row in enumerate(output_rows):
        # Ki·ªÉm tra c·ªôt QUESTION (n·∫øu c√≥)
        question_json = row.get('QUESTION')
        if question_json:
            try:
                question_objs = json.loads(question_json)
                for idx, obj in enumerate(question_objs):
                    image_name = obj.get('image', '')
                    if image_name:
                        if ' ' in image_name:
                            errors.append(f"Row {i+1} (QUESTION, item {idx+1}): Image name must not contain spaces: {image_name}")
                        elif not (image_name.lower().endswith('.jpg') or image_name.lower().endswith('.gif')):
                            errors.append(f"Row {i+1} (QUESTION, item {idx+1}): Image name must end with .jpg or .gif: {image_name}")
            except Exception:
                pass
        # Ki·ªÉm tra c·ªôt RESPONSE_1 (n·∫øu c√≥)
        response_json = row.get('RESPONSE_1')
        if response_json:
            try:
                response_objs = json.loads(response_json)
                for idx, obj in enumerate(response_objs):
                    image_name = obj.get('image', '')
                    if image_name:
                        if ' ' in image_name:
                            errors.append(f"Row {i+1} (RESPONSE_1, item {idx+1}): Image name must not contain spaces: {image_name}")
                        elif not (image_name.lower().endswith('.jpg') or image_name.lower().endswith('.gif')):
                            errors.append(f"Row {i+1} (RESPONSE_1, item {idx+1}): Image name must end with .jpg or .gif: {image_name}")
            except Exception:
                pass
    return errors 

def validate_question_intent_pattern(output_rows, debug=False):
    """
    Ki·ªÉm tra pattern h·ª£p l·ªá sau m·ªói Question/Section:
    - M·ªói nh√≥m Question-Intent_Response ph·∫£i c√≥ ƒë·ªß c·∫£ 'fallback' v√† 'silence'
    
    Args:
        output_rows (list): Danh s√°ch c√°c d√≤ng d·ªØ li·ªáu (dict ho·∫∑c list)
        debug (bool): C√≥ in th√¥ng tin debug kh√¥ng
    
    Returns:
        dict: {
            'errors': list,           # Danh s√°ch l·ªói
            'total_questions': int,   # T·ªïng s·ªë question
            'valid_questions': int,   # S·ªë question h·ª£p l·ªá
            'question_details': list  # Chi ti·∫øt t·ª´ng question
        }
    
    Quy t·∫Øc h·ª£p l·ªá:
        ‚úÖ Question ‚Üí fast_response ‚Üí fallback ‚Üí silence
        ‚úÖ Question ‚Üí fast_response ‚Üí silence ‚Üí fallback  
        ‚úÖ Question ‚Üí fallback ‚Üí silence
        ‚úÖ Question ‚Üí silence ‚Üí fallback
        
        ‚ùå Question ‚Üí fast_response ‚Üí fallback (thi·∫øu silence)
        ‚ùå Question ‚Üí fast_response ‚Üí silence (thi·∫øu fallback)
        ‚ùå Question ‚Üí fast_response (thi·∫øu c·∫£ fallback v√† silence)
    """
    errors = []
    question_details = []
    n = len(output_rows)
    
    if debug:
        print(f"üîç B·∫Øt ƒë·∫ßu validation v·ªõi {n} d√≤ng d·ªØ li·ªáu")
    
    i = 0
    while i < n:
        row = output_rows[i]
        
        # ===== B∆Ø·ªöC 1: Nh·∫≠n d·∫°ng Question/Section =====
        is_question = False
        question_content = None
        question_type = None
        
        if isinstance(row, dict):
            # Ki·ªÉm tra nhi·ªÅu key c√≥ th·ªÉ c√≥
            for key in ['QUESTION', 'Question', 'question', 'SECTION', 'Section', 'section']:
                if row.get(key) is not None and str(row.get(key)).strip():
                    is_question = True
                    question_content = str(row.get(key)).strip()
                    question_type = key.lower()
                    break
                    
        elif isinstance(row, list) and len(row) > 0:
            first_col = str(row[0]).strip().lower()
            if first_col in ['question', 'section']:
                is_question = True
                question_content = str(row[1]).strip() if len(row) > 1 else 'Unknown'
                question_type = first_col
        
        if is_question:
            if debug:
                print(f"\nüìã T√¨m th·∫•y {question_type} t·∫°i d√≤ng {i+1}: '{question_content}'")
            
            # ===== B∆Ø·ªöC 2: Thu th·∫≠p Intent_Response =====
            j = i + 1
            intent_group = []
            intent_details = []
            
            while j < n:
                next_row = output_rows[j]
                
                # Ki·ªÉm tra c√≥ ph·∫£i question/section m·ªõi kh√¥ng
                is_next_question = False
                if isinstance(next_row, dict):
                    for key in ['QUESTION', 'Question', 'question', 'SECTION', 'Section', 'section']:
                        if next_row.get(key) is not None and str(next_row.get(key)).strip():
                            is_next_question = True
                            break
                elif isinstance(next_row, list) and len(next_row) > 0:
                    first_col = str(next_row[0]).strip().lower()
                    if first_col in ['question', 'section']:
                        is_next_question = True
                
                if is_next_question:
                    break  # G·∫∑p question/section m·ªõi th√¨ d·ª´ng
                
                # L·∫•y intent name
                intent_name = None
                is_intent_response = False
                
                if isinstance(next_row, dict):
                    keys = list(next_row.keys())
                    if len(keys) > 0:
                        first_col_value = str(next_row.get(keys[0], '')).strip().lower()
                        # Ki·ªÉm tra nhi·ªÅu pattern c√≥ th·ªÉ c√≥
                        if any(pattern in first_col_value for pattern in ['intent_response', 'intent', 'response']):
                            is_intent_response = True
                            # T√¨m intent name trong c√°c c·ªôt/key c√≥ th·ªÉ
                            if len(keys) > 1:
                                intent_name = next_row.get(keys[1])
                            if not intent_name:
                                for intent_key in ['Intent', 'INTENT', 'intent', 'Intent_Name', 'INTENT_NAME']:
                                    if next_row.get(intent_key):
                                        intent_name = next_row.get(intent_key)
                                        break
                                        
                elif isinstance(next_row, list) and len(next_row) > 0:
                    first_col_value = str(next_row[0]).strip().lower()
                    if any(pattern in first_col_value for pattern in ['intent_response', 'intent', 'response']):
                        is_intent_response = True
                        if len(next_row) > 1:
                            intent_name = next_row[1]
                
                if is_intent_response and intent_name and str(intent_name).strip():
                    clean_intent = str(intent_name).strip().lower()
                    intent_group.append(clean_intent)
                    intent_details.append({
                        'row': j + 1,
                        'intent': clean_intent,
                        'raw_value': str(intent_name).strip()
                    })
                    if debug:
                        print(f"  ‚úì Intent t·∫°i d√≤ng {j+1}: '{clean_intent}'")
                
                j += 1
            
            # ===== B∆Ø·ªöC 3: Validation =====
            question_detail = {
                'row': i + 1,
                'question': question_content,
                'type': question_type,
                'intents': intent_group.copy(),
                'intent_details': intent_details.copy(),
                'is_valid': True,
                'missing': [],
                'has_intents': len(intent_group) > 0
            }
            
            # Ch·ªâ ki·ªÉm tra khi c√≥ √≠t nh·∫•t 1 intent
            if intent_group:
                intent_set = set(intent_group)
                
                # Ki·ªÉm tra thi·∫øu fallback v√† silence
                missing = []
                if 'fallback' not in intent_set:
                    missing.append('fallback')
                if 'silence' not in intent_set:
                    missing.append('silence')
                
                if missing:
                    question_detail['is_valid'] = False
                    question_detail['missing'] = missing
                    
                    # T·∫°o th√¥ng b√°o l·ªói chi ti·∫øt
                    error_msg = (
                        f"‚ùå {question_type.title()} '{question_content}' t·∫°i d√≤ng {i+1} "
                        f"thi·∫øu: {', '.join(missing)} "
                        f"(c√≥: {', '.join(sorted(intent_group))})"
                    )
                    errors.append(error_msg)
                    
                    if debug:
                        print(f"  ‚ùå KH√îNG H·ª¢P L·ªÜ - Thi·∫øu: {', '.join(missing)}")
                else:
                    if debug:
                        print(f"  ‚úÖ H·ª¢P L·ªÜ - C√≥ ƒë·ªß fallback v√† silence")
            else:
                if debug:
                    print(f"  ‚ö†Ô∏è  Kh√¥ng c√≥ Intent n√†o - B·ªè qua ki·ªÉm tra")
            
            question_details.append(question_detail)
        
        i += 1
    
    # ===== B∆Ø·ªöC 4: T·ªïng k·∫øt =====
    total_questions = len(question_details)
    valid_questions = sum(1 for q in question_details if q['is_valid'])
    
    result = {
        'errors': errors,
        'total_questions': total_questions,
        'valid_questions': valid_questions,
        'invalid_questions': total_questions - valid_questions,
        'question_details': question_details,
        'success_rate': valid_questions / total_questions * 100 if total_questions > 0 else 100
    }
    
    if debug:
        print(f"\nüìä K·∫æT QUA T·ªîNG K·∫æT:")
        print(f"   ‚Ä¢ T·ªïng questions: {total_questions}")
        print(f"   ‚Ä¢ H·ª£p l·ªá: {valid_questions}")
        print(f"   ‚Ä¢ Kh√¥ng h·ª£p l·ªá: {total_questions - valid_questions}")
        print(f"   ‚Ä¢ T·ª∑ l·ªá th√†nh c√¥ng: {result['success_rate']:.1f}%")
        print(f"   ‚Ä¢ T·ªïng l·ªói: {len(errors)}")
    
    return result

